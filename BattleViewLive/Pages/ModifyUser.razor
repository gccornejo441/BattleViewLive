@page "/edituser/{username}"
@using BattleViewLive.Api.Entities;
@using BattleViewLive.Services;
@inject UserService _userService

<h3>Edit User</h3>

<EditForm Model="@editUser" OnValidSubmit="UpdateUser">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="editUser.Username" />
        <ValidationMessage For="@(() => editUser.Username)" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="editUser.Email" />
        <ValidationMessage For="@(() => editUser.Email)" />
    </div>

    <div class="form-group">
        <label for="userRole">User Role:</label>
        <InputText id="userRole" class="form-control" @bind-Value="editUser.UserRole" />
        <ValidationMessage For="@(() => editUser.UserRole)" />
    </div>

    <!-- Add other editable fields as needed -->

    <button type="submit" class="btn btn-primary">Update User</button>
</EditForm>

@code {
    [Parameter]
    public int UserName { get; set; }

    private EditUser editUser;

    protected override async Task OnInitializedAsync()
    {
        var userAccount =
        // Fetch the user data using the UserId and populate the editUser
        editUser = await _userService.GetUserByUserNameAsync(userName);
    }


    private async Task UpdateUser()
    {
        // Perform validation before updating the user

        // Implement the logic to update the user using the values in the editUser
        // This method is an example and should be replaced with your own implementation
        // using the appropriate database access or API call

        // Example implementation:
        User user = await userService.GetUserByIdAsync(editUser.UserId);

        // Update the user properties with the values from editUser
        user.Username = editUser.Username;
        user.Email = editUser.Email;
        user.UserRole = editUser.UserRole;
        // Update other properties as needed

        // Call the method to update the user in your data source
        await userService.UpdateUserAsync(user);

        // Redirect to a confirmation page or display a success message
    }
}
