@page "/signup"
@using BattleViewLive.Api.Entities
@using BattleViewLive.Authentication;
@using BattleViewLive.Services.Interfaces;

@inject IJSRuntime _jsRuntime
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject UserAccountService userAccountService

<div class="container col-sm-4">
    <div class="row justify-content-center">
        <EditForm Model="@user" OnValidSubmit="@RegisterUser">
            <DataAnnotationsValidator />
            <div class="signup-box">
                <AuthorizeView Roles="Administrator">
                    <Authorized Context="Auth">
                        <h2>Create new user</h2>
                    </Authorized>
                    <NotAuthorized Context="Auth">
                        <h2>Sign Up</h2>
                    </NotAuthorized>
                </AuthorizeView>
                <InputText @bind-Value="user.Username" placeholder="user name" />
                <div class="error-message">
                    <ValidationMessage For="@(()=> user.Username)" />
                </div>

                <InputText type="password" @bind-Value="user.PasswordHash" placeholder="password" />
                <div class="error-message">
                    <ValidationMessage For="@(()=> user.PasswordHash)" />
                </div>

                <AuthorizeView Roles="Administator">
                    <Authorized Context="Auth">
                        <InputSelect @bind-Value="user.UserRole">
                            <option class="select-options text-dark" value="1">Administator</option>
                            <option class="select-options text-dark" value="2">User</option>
                        </InputSelect>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="Administator">
                    <Authorized Context="Auth">
                        <input type="submit" class="btn btn-sm" value="Create" />
                    </Authorized>
                    <NotAuthorized Context="Auth">
                        <input type="submit" class="btn btn-sm" value="Sign Up" />
                    </NotAuthorized>
                </AuthorizeView>
                @if (!IsUserAdmin)
                {
                    <p class="signup-login-buton"><a href="/login">Already an user?</a></p>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private RegisterUser user { get; set; } = new RegisterUser();

    public IUserService userService;
    public bool IsUserAuthenticated;
    public bool IsUserAdmin;

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            IsUserAuthenticated = true;
        }
        if (authState.User.IsInRole("Administator"))
        {
            IsUserAdmin = true;
        }

    }

    public async Task<bool> RegisterUser()
    {
        var returnedUser = await userService.RegisterUserAsync(user);

        if (returnedUser != null)
        {
            if (IsUserAdmin)
            {
                user = new RegisterUser();
                user.UserRole = "Administator";
                StateHasChanged();
            }
            else
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                    {
                        Username = returnedUser.Username,
                        UserRole = returnedUser.UserRole
                    });

                navManager.NavigateTo("/", true);
            }
        }
        return await Task.FromResult(true);
    }
}