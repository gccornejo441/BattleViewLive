@page "/register"
@using BattleViewLive.Api.Entities
@using BattleViewLive.Authentication;
@using BattleViewLive.Services.Interfaces;
@using Microsoft.AspNetCore.Mvc;
@using BattleViewLive.Services;

@inject IJSRuntime _jsRuntime
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject UserAccountService userAccountService
@inject UserService _userService

@*Without this attribute the page is not fully secure, since the user can simpley type in the address in the URL bar*@
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Register User | BattleViewLive</PageTitle>

<div class="container col-sm-4">
    <div class="row justify-content-center">
        <EditForm Model="@user" OnValidSubmit="@RegisteringUser">
            <DataAnnotationsValidator />
            <div class="signup-box">
                <AuthorizeView Roles="Administrator">
                    <Authorized Context="Auth">
                        <h2>Create new user</h2>
                    </Authorized>
                    <NotAuthorized Context="Auth">
                        <h2>Sign Up</h2>
                    </NotAuthorized>
                </AuthorizeView>
                <InputText @bind-Value="user.Username" placeholder="user name" />
                <div class="error-message">
                    <ValidationMessage For="@(()=> user.Username)" />
                </div>

                <InputText type="password" @bind-Value="user.PasswordHash" placeholder="password" />
                <div class="error-message">
                    <ValidationMessage For="@(()=> user.PasswordHash)" />
                </div>
                <InputText type="email" @bind-Value="user.Email" placeholder="email" />
                <div class="error-message">
                    <ValidationMessage For="@(()=> user.Email)" />
                </div>
                <AuthorizeView Roles="Administrator">
                    <Authorized Context="Auth">
                        <InputSelect @bind-Value="user.UserRole">
                            <option class="select-options text-dark" value="Administrator">Administrator</option>
                            <option class="select-options text-dark" value="User">User</option>
                        </InputSelect>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="Administrator">
                    <Authorized Context="Auth">
                        <input type="submit" class="btn btn-sm" value="Create" />
                    </Authorized>
                    <NotAuthorized Context="Auth">
                        <input type="submit" class="btn btn-sm" value="Sign Up" />
                    </NotAuthorized>
                </AuthorizeView>
                @if (!IsUserAdmin)
                {
                    <p class="signup-login-buton"><a href="/login">Already an user?</a></p>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private User user { get; set; } = new User();

    public bool IsUserAuthenticated;
    public bool IsUserAdmin;

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            IsUserAuthenticated = true;
        }
        if (authState.User.IsInRole("Administrator"))
        {
            IsUserAdmin = true;
        }

    }

    private async Task RegisteringUser()
    {
        var authState = await authenticationState;
        bool registrationSuccessful = await _userService.RegisterUserAsync(user, authState.User.Identity.Name);

        if (registrationSuccessful)
        {
            // Redirect to a success page or perform other actions
            navManager.NavigateTo("/", true);
        }
        else
        {
            await _jsRuntime.InvokeVoidAsync("alert", "Invalid User Name or Password");
        }
    }
}