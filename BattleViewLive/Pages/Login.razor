@page "/login"
@using BattleViewLive.Api.Entities
@using BattleViewLive.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div> 

        <div class="mb-3">
            <label>Passwrod</label>
            <input @bind="model.Password" class="form-control" type="password" placeholder="Password" />
       </div> 
        <div class="mb-3">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>

    </div>
</div>

@code {

    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }

    }

    private Model model = new Model();


    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount == null || userAccount.PasswordHash != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        // What if username and password are valid?
        //  By casting from the authStateProvider we can call the .UpdateAuthenticationState()
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            Username = userAccount.Username,
            UserRole = userAccount.UserRole
        });

            navManager.NavigateTo("/", true);

    }


}